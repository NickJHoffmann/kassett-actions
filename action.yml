name: 'Run Pythonic CI/CD'
description: 'Generic CI/CD Steps for simplifying deploying a Python SDK'
branding:
  icon: 'arrow-right-circle'
  color: 'gray-dark'
inputs:
  python-version:
    description: 'The description of the Python version to be used. For now it must be supported by setup-python3'
    default: "3.9"
    required: false

  install-docker:
    description: 'Installation of Docker and Docker Compose.'
    required: false
    default: "false"

  connect-to-vpn:
    description: 'The name of the VPN to connect. All OpenVPN compliant VPNs are supports, as well as Tailscale.'
    required: false
    default: ''

  aws-role:
    description: 'AWS role to assume.'
    default: ''
    required: false
  aws-role-region:
    description: 'AWS role region.'
    default: ''
    required: false

  aws-secrets:
    description: 'Extract AWS secrets as variables.'
    required: false
    default: ''

  python-path:
    description: 'Export the PYTHONPATH environment variable to to the CI/CD environment.'
    required: false
    default: ''

  install-dependencies-command:
    description: 'A custom command to install the dependencies. Recommended to use a Makefile target.'
    required: false
    default: ''
  test-command:
    description: 'A custom command to run tests. Recommended to use a Makefile target.'
    required: false
    default: ''
  custom-build-command:
    description: 'A custom command to build the package. This will not skip the upload step. Recommended to use a Makefile target.'
    default: ''
    required: false

  publish-package-using:
    description: 'The name of the build method. Currently supports Twine and Poetry.'
    required: false
    default: ''

  pypi-repo-url:
    description: 'The url for the PyPI repo. Defaults to https://pypi.org/'
    default: "https://pypi.org/"
    required: false

  pypi-repo-url-env-name:
    description: "The name of the environment variables that contains the PyPI url."
    default: ''
    required: false

  pypi-repo-name:
    description: "The name of the PyPI repo."
    default: ''
    required: false

  pypi-repo-name-env-name:
    description: "The environment variable that contains the name of the PyPI repo."
    default: ''
    required: false

  twine-username:
    description: 'Username for pypi.org. Defaults to __token__.'
    required: false
    default: '__token_'

  twine-password:
    description: 'Auth Key or Password for pypi.org.'
    required: false
    default: ''
  twine-password-env-name:
    description: 'The name of the environment variable in which the Twine password resides.'
    required: false


  poetry-username:
    description: 'Username for pypi.org.'
    required: false
    default: ''
  poetry-password:
    description: 'Auth Key or Password for poetry repo.'
    required: false
    default: ''


runs:
  using: composite
  steps:
      # Install docker if the client has specified the value as 'true'
#    - name: Install Docker Compose
#      if: ${{ inputs.install-docker != 'false' }}
#      uses: ndeloof/install-compose-action@v0.0.1
#      with:
#        version: v2.1.0
#
#    - name: Set up Docker Buildx
#      if: ${{ inputs.install-docker != 'false' }}
#      uses: docker/setup-buildx-action@v2

    - name: Export Python Path
      if: ${{ inputs.python-path != '' }}
      run: echo "PYTHONPATH=$(echo '$PYTHONPATH' | cut -c 1-6)" >> $GITHUB_ENV
      shell: bash
      env:
        PYTHONPATH: ${{ inputs.python-path }}

    - name: Set up Python 3.9
      uses: actions/setup-python@v3
      with:
        python-version: ${{ inputs.python-version }}

    - name: Set up Node
      uses: actions/setup-node@v3
      with:
        node-version: 20

#      # Assume AWS Role
#    - name: Assume AWS Role
#      if: ${{ inputs.aws-role != '' && inputs.aws-region != '' }}
#      uses: aws-actions/configure-aws-credentials@v4
#      with:
#        aws-region: ${{ inputs.aws-region }}
#        role-to-assume: ${{ inputs.aws-role }}
#
#    - name: Grab AWS Keys
#      if: ${{ inputs.aws-keys != '' }}
#      uses: aws-actions/aws-secretsmanager-get-secrets@v1
#      with:
#        secret-ids: ${{ inputs.aws_keys }}
#        parse-json-secrets: true
        

    - name: Build Virtual Env
      shell: bash
      run: |
        python -m venv venv
        source venv/bin/activate
        python -m pip install --upgrade pip
        pip install poetry

    - name: Export ENV Variables
      shell: python
      run: |
        import os
        import json
        
        inputs = json.loads(os.environ.get("KASSETT_INPUTS"))
        keys = [x for x in inputs.keys() if x.endswith("-env-name")]
        new_env_variables = {}
        for k in keys:
          new_key = k.replace("-env-name", "")
          if os.environ.get(new_key, None) is not None and os.environ.get(new_key) != '':
            new_env_variables["KASSETT_{}".format(new_key.upper().replace("-", ""))] = inputs[new_key]
          else:
            new_env_variables["KASSETT_{}".format(new_key.upper().replace("-", ""))] = inputs[k]
          del inputs[k]
          if os.environ.get(new_key, None) is not None:
            del inputs[new_key]
        for k, v in inputs.items():
          new_key = "KASSETT_{}".format(k.upper().replace("-", "_"))
          new_env_variables[new_key] = v
        for k, v in os.environ.items():
          if k != "KASSETT_INPUTS":
            new_env_variables[k] = v

        with open(os.getenv('GITHUB_ENV'), "w") as f:
          for k, v in new_env_variables.items():
            line = "=".join([k, v])
            f.write(line)
      env:
        KASSETT_INPUTS: ${{toJSON(inputs)}}

    - name: Print Env
      shell: python
      run: |
        import os
        print(os.environ)

#    - name: Install dependencies command
#      if: ${{ inputs.install-dependencies-command != '' }}
#      shell: python
#      run: |
#        import os
#        import subprocess
#        command = "source venv/bin/activate && " + os.environ.get("DEPENDENCIES_COMMAND")
#        subprocess.run(args=command, shell=True, check=True)
#      env:
#        DEPENDENCIES_COMMAND: inputs.install-dependencies-command
#
#    - name: Run test command
#      if: ${{ inputs.test-command != '' }}
#      shell: venv/bin/activate
#      run: |
#        import os
#        import subprocess
#        subprocess.run(args=os.environ.get("TEST_COMMAND"), shell=True, check=True)
#      env:
#        TEST_COMMAND: inputs.test-command
#
#    - name: Build Dependencies for Twine
#      if: ${{ inputs.publish-package-using == 'twine' && inputs.custom-build-command == '' }}
#      shell: bash
#      run: |
#        source venv/bin/activate
#        pip install twine wheel setuptools
#
#    - name: Build Twine
#      if: ${{ inputs.publish-package-using == 'twine' && inputs.custom-build-command == '' }}
#      shell: bash
#      run: |
#        source venv/bin/activate
#        python setup.py sdist bdist_wheel
#
#    - name: Upload Twine
#      if: ${{ inputs.publish-package-using == 'twine' }}
#      shell: bash
#      run: |
#        twine upload dist/*
#      env:
#        TWINE_USERNAME: ${{ inputs.
    
    


