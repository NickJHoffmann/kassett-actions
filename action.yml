name: 'Run Pythonic CI/CD'
description: 'Generic CI/CD Steps for simplifying deploying a Python SDK'
branding:
  icon: 'arrow-right-circle'
  color: 'gray-dark'
inputs:
  python-version:
    description: 'The description of the Python version to be used. For now it must be supported by setup-python3'
    default: "3.9"
    required: false

  install-docker:
    description: 'Installation of Docker and Docker Compose.'
    required: false
    default: "false"

  connect-to-vpn:
    description: 'The name of the VPN to connect. Currently Pritunl and Tailscale are supported.'
    required: false
    default: ''

  aws-role:
    description: 'AWS role to assume.'
    default: ''
    required: false
  aws-region:
    description: 'AWS role region.'
    default: ''
    required: false

  aws-secrets:
    description: 'Extract AWS secrets as variables.'
    required: false
    default: ''

  python-path:
    description: 'Export the PYTHONPATH environment variable to to the CI/CD environment.'
    required: false
    default: ''

  install-dependencies-command:
    description: 'A custom command to install the dependencies. Recommended to use a Makefile target.'
    required: false
    default: ''
  test-command:
    description: 'A custom command to run tests. Recommended to use a Makefile target.'
    required: false
    default: ''
  custom-build-command:
    description: 'A custom command to build the package. This will not skip the upload step. Recommended to use a Makefile target.'
    default: ''
    required: false

  publish-package-using:
    description: 'The name of the build method. Currently supports Twine and Poetry.'
    required: false
    default: ''

  pypi-repo-url:
    description: 'The url for the PyPI repo. Defaults to https://pypi.org/'
    default: "https://pypi.org/"
    required: false
  pypi-repo-url-env-name:
    description: "The name of the environment variables that contains the PyPI url."
    default: ''
    required: false
  pypi-repo-name:
    description: "The name of the PyPI repo."
    default: ''
    required: false
  pypi-repo-name-env-name:
    description: "The environment variable that contains the name of the PyPI repo."
    default: ''
    required: false

  pypi-username:
    description: 'Username for pypi.org. Defaults to __token__.'
    required: false
    default: '__token__'
  pypi-username-env-name:
    description: 'Password for pypi.org.'
    required: false
    default: ''

  pypi-password:
    description: 'Auth Key or Password for pypi.org.'
    required: false
    default: ''
  pypi-password-env-name:
    description: 'The name of the environment variable in which the PyPI password resides.'
    required: false
    default: ''

  tailscale-auth-key:
    description: 'The Auth Key required to connect to Tailscale.'
    required: false
    default: ''
  tailscale-auth-key-env-name:
    description: 'The name of the environment variable in which the Auth Key resides.'
    required: false
    default: ''

  tailscale-oauth-client-id:
    description: 'The client id for connecting to Tailscale.'
    required: false
    default: ''
  tailscale-oauth-client-id-env-name:
    description: 'The name of the environment variable in which the Tailscale client id resides.'
    required: false
    default: ''

  tailscale-oauth-secret:
    description: 'The secret for connecting to Tailscale.'
    required: false
    default: ''
  tailscale-oauth-secret-env-name:
    description: 'The name of the environment variable in which the Tailscale secret resides.'
    required: false
    default: ''

  tailscale-tags:
    description: 'The tags required for connecting to Tailscale.'
    required: false
    default: ''
  tailscale-tags-env-name:
    description: 'The name of the environment variable in which the Tailscale tags reside.'
    required: false
    default: ''

  pritunl-profile-file:
    description: 'The profile config file for Pritunl.'
    required: false
    default: ''
  pritunl-profile-file-env-name:
    description: 'The name of the environment variable for the profile config file for Pritunl.'
    required: false
    default: ''

  pritunl-profile-server:
    description: 'The name of the Pritunl profile server.'
    required: false
    default: ''
  pritunl-profile-server-env-name:
    description: 'The name of the environment variable for the Pritunl profile server.'
    required: false
    default: ''

  pritunl-profile-pin:
    description: 'The name of the Pritunl profile pin.'
    required: false
    default: 'No Pin'
  pritunl-profile-pin-env-name:
    description: 'The name of the environment variable for the Pritunl profile pin.'
    required: false
    default: ''

runs:
  using: composite
  steps:
    # Install docker if the client has specified the value as 'true'
    - name: Install Docker Compose
      if: ${{ inputs.install-docker != 'false' }}
      uses: ndeloof/install-compose-action@v0.0.1
      with:
        version: v2.1.0

    - name: Set up Docker Buildx
      if: ${{ inputs.install-docker != 'false' }}
      uses: docker/setup-buildx-action@v2

    # Export the Python Path for running tests and other custom commands
    - name: Export Python Path
      if: ${{ inputs.python-path != '' }}
      run: echo "PYTHONPATH=$(echo '$PYTHONPATH' | cut -c 1-6)" >> $GITHUB_ENV
      shell: bash
      env:
        PYTHONPATH: ${{ inputs.python-path }}

    # Setup up Python with custom version -- must be supported by v3
    - name: Set up Python x
      uses: actions/setup-python@v3
      with:
        python-version: ${{ inputs.python-version }}

    - name: Set up Node
      uses: actions/setup-node@v3
      with:
        node-version: 20

    - name: Assume AWS Role
      if: ${{ inputs.aws-role != '' && inputs.aws-region != '' }}
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: ${{ inputs.aws-region }}
        role-to-assume: ${{ inputs.aws-role }}

    - name: Build Virtual Env
      shell: bash
      run: |
        python -m venv venv
        source venv/bin/activate
        python -m pip install --upgrade pip
        pip install poetry

    - name: Install boto3
      if: ${{ inputs.aws-secrets != '' }}
      shell: bash
      run: |
        pip install boto3

    # Extract AWS secrets
    - name: Grab AWS Keys
      if: ${{ inputs.aws-secrets != '' && inputs.aws-region != '' }}
      shell: python
      run: |
        import boto3
        import os
        import json

        def is_valid_json(my_json):
            try:
                _ = json.loads(my_json)
            except ValueError as e:
                return False
            return True


        i = os.environ.get("AWS_KEYS")
        inputs = i.split(",")
        secrets_to_retrieve = []
        put = {}
        for i in inputs:
            temp = {}
            if "=" in i:
                t = i.split("=")
            else:
                t = ["", i]
            if t[1].endswith("*"):
                temp["secret_name_prefix"] = t[1][0:-1]
            else:
                temp["secret_name"] = t[1]
            if t[0].endswith("*"):
                temp["env_name_prefix"] = t[0][0:-1]
            else:
                if t[0] != "":
                    temp["env_name"] = t[0]
            secrets_to_retrieve.append(temp)

        client = boto3.client('secretsmanager')
        paginator = client.get_paginator('list_secrets')
        for page in paginator.paginate():
            for name in page['SecretList']:
                i = next((i for i, x in enumerate(secrets_to_retrieve) if "secret_name" in x
                          and x["secret_name"] == name["Name"]), None)
                if i is not None:
                    secrets_to_retrieve[i]["arn"] = name["ARN"]
                i = next((i for i, x in enumerate(secrets_to_retrieve) if "secret_name_prefix" in x and name["Name"].startswith(x["secret_name_prefix"])), None)
                if i is not None:
                    secrets_to_retrieve[i]["arn"] = name["ARN"]

        for secret in secrets_to_retrieve:
            value = client.get_secret_value(SecretId=secret['arn'])
            if is_valid_json(value["SecretString"]):
                secret_string = json.loads(value["SecretString"])
                prefix = ""
                if "env_name" in secret:
                    prefix = secret["env_name"]
                elif "env_name_prefix" in secret:
                    prefix = secret["env_name_prefix"]
                else:
                    prefix = ""
                for k, v in secret_string.items():
                    k = prefix + k.upper().replace("-", "_")
                    put[k] = v
            else:
                if "env_name" in secret:
                    put[secret["env_name"]] = value["SecretString"]
                elif "env_name_prefix" in secret:
                    put[secret["env_name_prefix"]] = value["SecretString"]
                else:
                    put[value["Name"].upper().replace("-", "_")] = value["SecretString"]
        
        lines = ["{}={}".format(k, v) for k, v in put.items()]
        env_file = os.getenv('GITHUB_ENV')
        with open(env_file, "a") as f:
            f.write("\n".join(lines))
      env:
        AWS_KEYS: ${{ inputs.aws-secrets }}
        AWS_DEFAULT_REGION: ${{ inputs.aws-region }}

    - name: Export ENV Variables
      shell: python
      run: |
        import os
        import json
        
        inputs = json.loads(os.environ.get("KASSETT_INPUTS"))
        keys = [x for x in inputs.keys() if x.endswith("-env-name")]
        new_env_variables = {}
        
        for k in keys:
          new_key = k.replace("-env-name", "")
          var_name = "KASSETT_{}".format(new_key.upper().replace("-", "_"))
          if new_key in inputs and inputs[new_key] != '' and inputs[new_key] != "''":
            new_env_variables[var_name] = inputs[new_key]
            del inputs[new_key]
          else:
            new_env_variables[var_name] = os.environ.get(inputs[k][1:-1)
          del inputs[k]
        
        new_env_variables["KASSETT_INPUTS"] = ""
            
        for k, v in inputs.items():
          if k == "aws-secrets":
            continue
          if " " in v and not v.startswith("\""):
            v = '"{}"'.format(v)
          new_key = "KASSETT_{}".format(k.upper().replace("-", "_"))
          new_env_variables[new_key] = v
        
        env_file = os.getenv('GITHUB_ENV')
      
        lines = ["{}={}".format(k, v) for k, v in new_env_variables.items()]
        with open(env_file, "a") as f:
            f.write("\n".join(lines))
      env:
        KASSETT_INPUTS: ${{toJSON(inputs)}}

    - name: Echo secret
      shell: bash
      run: |
        echo "$KASSETT_TAILSCALE_OAUTH_CLIENT_ID"

    - name: Connect to Tailscale
      if: ${{ inputs.connect-to-vpn == 'tailscale' }}
      uses: tailscale/github-action@v2
      with:
        oauth-client-id: ${{ env.KASSETT_TAILSCALE_OAUTH_CLIENT_ID }}
        oauth-secret: ${{ env.KASSETT_TAILSCALE_OAUTH_SECRET }}
        tags: ${{ env.KASSETT_TAILSCALE_TAGS }}
        authkey: ${{ env.KASSETT_TAILSCALE_AUTHKEY }}

    - name: Connect to Pritunl
      if: ${{ inputs.connect-to-vpn == 'pritunl' }}
      uses: nathanielvarona/pritunl-client-github-action@v1
      with:
        profile-file: ${{ env.KASSETT_PRITUNL_PROFILE_FILE }}
        profile-pin: ${{ env.KASSETT_PRITUNL_PROFILE_PIN }}
        profile-server: ${{ env.KASSETT_PRITUNL_PROFILE_SERVER }}

    - name: Install dependencies command
      if: ${{ env.KASSETT_INSTALL_DEPENDENCIES_COMMAND != '' }}
      shell: bash
      run: |
        source venv/bin/activate
        eval "$KASSETT_INSTALL_DEPENDENCIES_COMMAND"

    - name: Run test command
      if: ${{ env.KASSETT_TEST_COMMAND != '' }}
      shell: bash
      run: |
        source venv/bin/activate
        eval "$KASSETT_TEST_COMMAND"

    - name: Build Dependencies for Twine
      if: ${{ env.KASSETT_PUBLISH_PACKAGE_USING == 'twine' && env.KASSETT_CUSTOM_BUILD_COMMAND == '' }}
      shell: bash
      run: |
        source venv/bin/activate
        pip install twine wheel setuptools

    - name: Build Twine
      if: ${{ env.KASSETT_PUBLISH_PACKAGE_USING == 'twine' && env.KASSETT_CUSTOM_BUILD_COMMAND == '' }}
      shell: bash
      run: |
        source venv/bin/activate
        python setup.py sdist bdist_wheel

    - name: Custom Build
      if: ${{ env.KASSETT_CUSTOM_BUILD_COMMAND != '' }}
      shell: bash
      run: |
        source venv/bin/activate
        eval "$KASSETT_CUSTOM_BUILD_COMMAND"

    - name: Upload Twine
      if: ${{ env.KASSETT_PUBLISH_PACKAGE_USING == 'twine' }}
      shell: bash
      run: |
        source venv/bin/activate
        twine upload dist/*
      env:
        TWINE_USERNAME: ${{ env.KASSETT_PYPI_USERNAME }}
        TWINE_REPOSITORY: ${{ env.KASSETT_PYPI_REPO_URL }}
        TWINE_PASSWORD: ${{ env.KASSETT_PYPI_PASSWORD }}

    - name: Upload Poetry
      if: ${{ env.KASSETT_PUBLISH_PACKAGE_USING == 'poetry' && env.KASSETT_CUSTOM_BUILD_COMMAND == '' }}
      shell: bash
      run: |
        source venv/bin/activate
        poetry config repositories.prod ${REPOSITORY_URL}
        poetry config http-basic.${REPOSITORY_NAME} ${REPOSITORY_USERNAME} ${REPOSITORY_PASSWORD}
        (yes || true) | poetry publish --build --repository ${REPOSITORY_NAME}
      env:
        REPOSITORY_NAME: ${{ env.KASSETT_PYPI_REPO_NAME }}
        REPOSITORY_URL: ${{ env.KASSETT_PYPI_REPO_URL }}
        REPOSITORY_USERNAME: ${{ env.KASSETT_PYPI_USERNAME }}
        REPOSITORY_PASSWORD: ${{ env.KASSETT_PYPI_PASSWORD }}


    
    


