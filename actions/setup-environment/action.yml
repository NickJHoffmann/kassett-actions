name: 'Setting up CI/CD environment'
description: 'Generic workflow for setting up an advanced CI/CD environment'
branding:
  icon: 'arrow-right-circle'
  color: 'gray-dark'
inputs:
  python-version:
    description: 'The description of the Python version to be used. For now it must be supported by setup-python3'
    default: "3.9"
    required: false

  install-docker:
    description: 'Installation of Docker and Docker Compose.'
    required: false
    default: "false"

  connect-to-vpn:
    description: 'The name of the VPN to connect. Currently OpenVPN, Pritunl and Tailscale are supported.'
    required: false
    default: ''

  aws-role:
    description: 'AWS role to assume.'
    default: ''
    required: false
  aws-region:
    description: 'AWS role region.'
    default: ''
    required: false

  aws-secrets:
    description: 'Extract AWS secrets as variables.'
    required: false
    default: ''


runs:
  using: composite
  steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Install Docker Compose
      if: ${{ inputs.install-docker != 'false' }}
      uses: ndeloof/install-compose-action@v0.0.1
      with:
        version: v2.1.0

    - name: Set up Docker Buildx
      if: ${{ inputs.install-docker != 'false' }}
      uses: docker/setup-buildx-action@v2

    - name: Set up Python x
      uses: actions/setup-python@v3
      with:
        python-version: ${{ inputs.python-version }}

    # Only doing this because of the AWS Role
    - name: Set up Node
      uses: actions/setup-node@v3
      with:
        node-version: 20

    - name: Assume AWS Role
      if: ${{ inputs.aws-role != '' && inputs.aws-region != '' }}
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: ${{ inputs.aws-region }}
        role-to-assume: ${{ inputs.aws-role }}

    - name: Install CI Python Dependencies
      if: ${{ inputs.aws-secrets != '' }}
      shell: bash
      run: |
        sudo apt-get install build-essential
        sudo apt-get update && sudo apt-get install make
        pip install dependencies.txt

    - name: Grab AWS Keys
      if: ${{ inputs.aws-secrets != '' && inputs.aws-region != '' }}
      shell: bash
      run: python -c ' import kassett_actions; kassett_actions.invocations.write_aws_keys() '
      env:
        AWS_KEYS: ${{ inputs.aws-secrets }}
        AWS_DEFAULT_REGION: ${{ inputs.aws-region }}

    - name: Export ENV Variables
      shell: bash
      run: python -c ' import kassett_actions; kassett_actions.invocations.normalise_environment_variables_for_kassett() '
      env:
        KASSETT_INPUTS: ${{toJSON(inputs)}}

    # I am doing this because of some weird functionality in the Tailscale action
    # where they don't differentiate between not including a value and listing at ''
    - name: Connect to Tailscale Without Tags
      if: ${{ inputs.connect-to-vpn == 'tailscale' }}
      uses: tailscale/github-action@v2
      with:
        oauth-client-id: ${{ env.KASSETT_TAILSCALE_OAUTH_CLIENT_ID }}
        oauth-secret: ${{ env.KASSETT_TAILSCALE_OAUTH_SECRET }}
        tags: ${{ env.KASSETT_TAILSCALE_TAGS }}

    - name: Connect to Pritunl
      if: ${{ inputs.connect-to-vpn == 'pritunl' }}
      uses: nathanielvarona/pritunl-client-github-action@v1
      with:
        profile-file: ${{ env.KASSETT_PRITUNL_PROFILE_FILE }}
        profile-pin: ${{ env.KASSETT_PRITUNL_PROFILE_PIN }}
        profile-server: ${{ env.KASSETT_PRITUNL_PROFILE_SERVER }}